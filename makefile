# Make Research Computationally Reproducible

# This makefile controls the compilation of research articles and presentations.
# Written by Niels Aka, 2017-2020, and licensed under the GPLv3.


#---------------------------- Variables --------------------------------------#
# Note: This makefile follows the convention that each document is named 
# as "paper/paper_main.pdf" or "supplement/supplement_main.pdf".
# Folder and file prefix need to coincide.

# Specify documents
DOCs     = paper presentation

# latexmk options
LATEXMKOTPS = -use-make -pdf -g -f -e '$$max_repeat=9' -synctex=1

# relative to project root
OUT_DIR  = output/
CODE_DIR = code/

# (default) location of prerequisites
vpath %.R $(CODE_DIR)
vpath %_done $(OUT_DIR)
vpath %.rds $(OUT_DIR)

# relative to latex root (paper/ presentation/)
SUB_DIR  = input/
CONF_DIR = config/ # TODO: clashes with latex config folder !?
CHAP_DIR = chapters/

# List all primary targets
PDFs = $(foreach w, $(DOCs), $(w)/$(w)_main.pdf)

PAPR = $(word 1, $(PDFs))
PRES = $(word 2, $(PDFs))

# Read in automatic dependencies #
#--------------------------------#

# file ending of dependecy files
DEP_FILE_END = .dep

# folders to check during automatic dependency creation
DEP_DIRs = $(SUB_DIR) $(CHAP_DIR) $(CONF_DIR)

# names of all dependency files
ALL_DEP_FILEs = $(foreach w, $(PDFs), $(basename $(w))$(DEP_FILE_END))


# Local input folders #
#---------------------#

# all sub-folders where intermediate inputs are copied to or deleted from
ALL_SUB_DIRs   = $(foreach a, $(DOCs), $(a)/$(SUB_DIR))
COPY_SUB_DIRs  = $(foreach a, $(ALL_SUB_DIRs), $(a)%)
ALL_SUB_FILEs  = $(foreach a, $(ALL_SUB_DIRs), $(a)*)
$(shell mkdir -p $(ALL_SUB_DIRs))


#---------------------------- Rules ------------------------------------------#
# Edit by hand

.PHONY: all paper presentation
all: paper
paper: $(PAPR)
presentation: $(PRES)

include pipelines

########################################
# Implicit Rule for all 'done' markers #
########################################

# implicit default rule for '_done' dummy files
# run first prerequisite and touch dummy file
%_done:
	cd $(CODE_DIR); Rscript $(notdir $<)
	touch $@

%.rds:
	cd $(CODE_DIR); Rscript $(notdir $<)


# Make main targets - paper, presentation, supplement, ... #
#----------------------------------------------------------#

%_main.pdf: %_main.tex pipelines
	cd $(@D); \
	latexmk \
		-deps-out=$(basename $(@F))$(DEP_FILE_END) \
		$(LATEXMKOTPS) $(PREVIEW_CONTINUOUSLY)\
		$(notdir $<) || true
	$(call format_deps,$(@D),$(@F),$(basename $@)$(DEP_FILE_END))
	cd $(@D); \
	echo "\n----------------------------------"; \
	echo "\nLaTeX Errors and Warnings: \n"; \
	rubber-info $(*F)_main.log | sed 's.^.$(@D)/.'

# Include automatic dependencies generated by LaTeX
# (will be ignored if not existent)
-include $(ALL_DEP_FILEs)

# copy inputs over from $(OUT_DIR)
$(COPY_SUB_DIRs): $(OUT_DIR)%
	cp $< $@

.PHONY: watch_paper
watch_paper: PREVIEW_CONTINUOUSLY=-pvc
watch_paper: $(PAPR)

# Miscellaneous #
#---------------#

# avoid deletion of intermediary files
.SECONDARY:

# initialise the analysis 
# e.g. after having cloned the repository, the timestamps will be mixed up.

.PHONY: init initall
init:
	make -t all; rm $(PDFs)
initall: init
	touch $(ALL_SUB_FILEs)

# remove auxiliary files, or final targets, or both
.PHONY: clean cleanall clean_pdf
clean:
	rm -f \
 	*/Rplots.pdf */*.Rout */.Rhistory \
	*/*.aux */*.bak */*.bbl */*.blg */*.log	\
	*/*.nav */*.out */*.snm */*.toc \
	*/*.fdb_latexmk */*.fls */*.synctex.gz \
	*/*.synctex.gz\(busy\)
clean_pdf:
	rm -f $(PDFs)
cleanall: clean clean_pdf
	rm -f */*$(DEP_FILE_END) # also clean recorded dependencies

# reset the analysis

# reset the intermediary input folders (but not subfolders) 
.PHONY: reset resetall
reset: cleanall
	rm $(ALL_SUB_FILEs) || true 
# reset all by deleting all files in output and intermediary input folders;
# -> allows to run complete analysis from scratch
resetall: reset
	rm -r $(ALL_SUB_DIRs)
	find output/ -maxdepth 1 -type f -not -name '.gitignore' -delete


#------------------------ Miscellaneous ---------------------------------------#

# Format automatically created dependencies
# such that they will only include those dependencies that are
# in locations specific to the project (as specified by DEP_DIRs).
define format_deps
	cp $(3) tmp.d
	echo '$(1)/$(2) :\' > $(3)
	for DEP in $(DEP_DIRs); do \
       grep -E "^(.*$1\/|\s*)$$DEP" tmp.d >> $3; \
       sed -i -e "s%^.*$$DEP% $(1)/$$DEP%" $(3); \
	done; rm tmp.d
endef
